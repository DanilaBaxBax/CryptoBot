import telegram
#from telegram.ext import Updater
#from telegram.ext import CommandHandler
from tracker import get_prices
from string import Template
import json
import requests
import tracker2
import blockcypher
from moneywagon import AddressBalance
from web3 import Web3
from TrackerRUB import data2
import time
from credit_card_checker import CreditCardChecker
import random
import math
from bs4 import BeautifulSoup

import telebot
import aiogram
from telebot import types




API_TOKEN = 'YOUR_TOKEN' 



#updater = Updater(token=API_TOKEN,use_context=True) #use_context=True
#dispatcher = updater.dispatcher

def course(): # —Ñ—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä—ç–∫–µ—Ä–∞
    
    # chat_id = update.effective_chat.id
    message = ""

    crypto_data = get_prices()
    for i in crypto_data:
       coin = crypto_data[i]["coin"]
       price = crypto_data[i]["price"]
       change_day = crypto_data[i]["change_day"]
       change_hour = crypto_data[i]["change_hour"]
       message += f"Coin: {coin}\nPrice: ${price:,.2f}\nHour Change: {change_hour:.3f}%\nDay Change: {change_day:.3f}%\n\n"
    return message

    
bot = telebot.TeleBot(API_TOKEN)


def get_exchange_rate():
    url = 'https://cbr.ru/currency_base/daily/'
    try:
        response = requests.get(url)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"Error getting exchange rate: {e}")
        return None

    soup = BeautifulSoup(response.text, 'html.parser')
    table = soup.find('table', {'class': 'data'})
    rows = table.find_all('tr')
    for row in rows:
        columns = row.find_all('td')
        if len(columns) > 0 and columns[1].text == 'USD':
            return float(columns[4].text.replace(',', '.'))

def get_bitcoin_rate():
    url = 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd'
    try:
        response = requests.get(url)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"Error getting bitcoin rate: {e}")
        return None

    data = response.json()
    return data['bitcoin']['usd']

def welcome(message, edit=False):
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("BTC1", switch_inline_query_current_chat="BTC1 "))
    markup.row(types.InlineKeyboardButton("BTC2", switch_inline_query_current_chat="BTC2 "))
    markup.row(types.InlineKeyboardButton("Tether1", switch_inline_query_current_chat="Tether1 "))
    markup.row(types.InlineKeyboardButton("Tether2", switch_inline_query_current_chat="Tether2 "))
    if edit:
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏ —Ñ–æ—Ä–º—É–ª—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:", message.chat.id, message.message_id, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏ —Ñ–æ—Ä–º—É–ª—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:", reply_markup=markup)

#@bot.message_handler(commands=['start'])
#def send_welcome(message):
 #  welcome(message)

def calculate_formula(input_value: str, formula: str) -> str:
    value = float(input_value)
    price= tracker2.scrape()
    rub_course = data2
    ruble_to_dollar = rub_course
    bitcoin_rate = price

    if ruble_to_dollar is None or bitcoin_rate is None:
        return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç"

    if formula.lower() == "btc1":
        result = ((value / ruble_to_dollar) / bitcoin_rate) * 0.75
        result = round(result, 5)
    elif formula.lower() == "btc2":
        result = ((value * bitcoin_rate) * ruble_to_dollar) * 0.75
        result = round(result)
    elif formula.lower() == "tether1":
        result = (value / ruble_to_dollar) * 0.75
        result = round(result, 5)
    elif formula.lower() == "tether2":
        result = (value * ruble_to_dollar) * 0.75
        result = round(result)
    else:
        return "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞"
    return str(result)

def get_valid_range_message(formula):
    if formula.lower() == "btc1":
        return "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è BTC1: 1000 ‚ÇΩ - 200000 ‚ÇΩ"
    elif formula.lower() == "btc2":
        return "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è BTC2: 0.0005 BTC - 0.1 BTC"
    elif formula.lower() == "tether1":
        return "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è Tether1: 1000 ‚ÇΩ - 200000 ‚ÇΩ"
    elif formula.lower() == "tether2":
        return "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è Tether2: 14 USDT - 3000 USDT"
    else:
        return "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞"

def check_input_value(value, formula):
    value = float(value)
    if formula.lower() == "btc1" and 1000 <= value <= 200000:
        return True
    elif formula.lower() == "btc2" and 0.0005 <= value <= 0.1:
        return True
    elif formula.lower() == "tether1" and 1000 <= value <= 200000:
        return True
    elif formula.lower() == "tether2" and 14 <= value <= 3000:
        return True
    else:
        return False

def validate_input_value(value, formula):
    if not value.replace('.', '', 1).isdigit():
        return False, "‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"
    value = float(value)
    if formula.lower() == "btc1" and 1000 <= value <= 200000:
        return True, ""
    elif formula.lower() == "btc2" and 0.0005 <= value <= 0.1:
        return True, ""
    elif formula.lower() == "tether1" and 1000 <= value <= 200000:
        return True, ""
    elif formula.lower() == "tether2" and 14 <= value <= 3000:
        return True, ""
    else:
        if formula.lower() == "btc1":
            error_message = "‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç 1000‚ÇΩ –¥–æ 200000‚ÇΩ"
        elif formula.lower() == "btc2":
            error_message = "‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç 0.0005 BTC –¥–æ 0.1 BTC"
        elif formula.lower() == "tether1":
            error_message = "‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç 1000‚ÇΩ –¥–æ 200000‚ÇΩ"
        elif formula.lower() == "tether2":
            error_message = "‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç 14 USDT –¥–æ 3000 USDT"
        else:
            error_message = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞"

        return False, error_message

def get_description(value, formula, result):
    if formula.lower() == "btc1":
        return f"üç≠ –ü–æ–∫—É–ø–∫–∞: {value} ‚ÇΩ = {result} BTC"
    elif formula.lower() == "btc2":
        return f"üç≠ –ü—Ä–æ–¥–∞–∂–∞: {value} BTC = {result} ‚ÇΩ"
    elif formula.lower() == "tether1":
        return f"üç≠ –ü–æ–∫—É–ø–∫–∞ : {value} ‚ÇΩ = {result} USDT"
    elif formula.lower() == "tether2":
        return f"üç≠ –ü—Ä–æ–¥–∞–∂–∞: {value} USDT = {result} ‚ÇΩ"
    else:
        return "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞"

@bot.inline_handler(func=lambda query: True)
def inline_calculator(query):
    query_data = query.query.split(" ", 1)
    if len(query_data) > 1:
        formula, input_value = query_data
        if input_value and formula:
            is_valid, error_message = validate_input_value(input_value, formula)
            if is_valid:
                result = calculate_formula(input_value, formula)
                title = get_description(input_value, formula, result)
                description = "‚úÖ –ù–∞–∂–º–∏—Ç–µ —Å—é–¥–∞ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å ‚úÖ"
                content = types.InputTextMessageContent(title)
                article = types.InlineQueryResultArticle(
                    id=0,
                    title=title,
                    input_message_content=content,
                    description=description,
                )
                bot.answer_inline_query(query.id, [article])
            else:
                title = "‚ùóÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
                description = error_message
                content = types.InputTextMessageContent(title)
                article = types.InlineQueryResultArticle(
                    id=0,
                    title=title,
                    input_message_content=content,
                    description=description,
                )
                bot.answer_inline_query(query.id, [article])

@bot.message_handler(func=lambda message: not message.text.startswith('/'))
def ignore_message(message):
    pass




value = ''
old_value = ''

user_dict = {}
user_dict2 = {}
user_dict3 = {}
user_dict4 = {}


class user:
    def __init__(self,sum):
        
        
        self.sum = sum
        keys = {'Summ', 'Wallet', 'Summ', 'pay'}
        

        for key in keys:
            self.key = None

class user2:
    def __init__(self,sum):
        
        
        self.sum = sum
        keys = {'Summ', 'Wallet', 'Summ', 'pay'}
        

        for key in keys:
            self.key = None


class user3:
    def __init__(self,sum):
        
        
        self.sum = sum
        keys = {'Summ', 'Wallet', 'Summ', 'pay'}
        

        for key in keys:
            self.key = None


class user4:
    def __init__(self,sum):
        
        
        self.sum = sum
        keys = {'Summ', 'Wallet', 'Summ', 'pay'}
        

        for key in keys:
            self.key = None           

    
#@bot.message_handler(commands = ['Bitcoin_buy'])

def buy_btc(message): #–≤–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏—Ç–∫–æ–∏–Ω–∞
    
    global y
    global k
    global msg_to_delete3
    price= tracker2.scrape()
    rub_course = data2
    bot.delete_message(message.chat.id, msg_to_delete7.id)
    
  
    try:
        k = int (message.text)
        
        
    
        if (k >= 1000 and k <= 200000):
            chat_id = message.chat.id
            user_dict [chat_id]= user(message.text)
            user.pay = ((k /rub_course) / price) * 0.75
            y = ((k /rub_course) / price) * 0.75
            user.pay = round(user.pay, 5)
            y = round(y, 5)
            #bot.delete_message(message.chat.id, message.id)
            msg_to_delete3 = bot.send_message(message.chat.id, '‚¨áÔ∏è–ü–æ–∫—É–ø–∫–∞ BTC: {} ‚ÇΩ \nüí∞–°—É–º–º–∞  –∫ –ø–æ–ª—É—á–µ–Ω–∏—é:  {} BTC \n –í–≤–µ–¥–∏—Ç–µ Bitcon –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:  {} BTC'.format(k,y,y))
            #msg = bot.edit_message_text(chat_id = message.call.chat.id,message_id= message.call.id, text='–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ ')
            
            bot.delete_message(message.chat.id, message.id)
            
            #msg = bot.edit_message_text(message.chat.id, message.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫')
            #msg = bot.edit_message_text(chat_id=message.chat.id, message_id=message.id, text = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫')
            #bot.delete_message(message.chat.id, message.id)
            bot.register_next_step_handler(msg_to_delete3,buy_btc_2)
                     
        else :
            Inline = types.InlineKeyboardMarkup()
            Back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥' , callback_data= 'Back_buy3')
            Inline.add (Back)
            #msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', reply_markup = Inline)
            msg = bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')

            
            bot.delete_message(message.chat.id, msg2)
            bot.register_next_step_handler(msg,buy_btc)
           
       
    except ValueError:
        Inline = types.InlineKeyboardMarkup()
        Back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥' , callback_data= 'Back_buy3')
        Inline.add(Back)
        #msg2 = bot.reply_to(message,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', reply_markup = Inline)
        msg2 = bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')

        
        bot.delete_message(message.chat.id, msg2)
        bot.register_next_step_handler(msg2, buy_btc)    
        
      

def buy_btc_2(message): # –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
    global q
    q = str (message.text)
    
    
  
    try:
        Inline = types.InlineKeyboardMarkup(row_width= 2)
        Back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥' , callback_data= 'Back')
        No = types.InlineKeyboardButton(text= 'üîô–ù–∞–∑–∞–¥', callback_data= 'btc_buy_no')
        Yes = types.InlineKeyboardButton(text = ' ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data= 'btc_buy_yes')
        Inline.add(No, Yes)

        total = blockcypher.get_total_balance(message.text)
        
        group_id = 'your_group_ID' 
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.wallet = message.text
        #bot.send_message(message.chat.id,'–ö–æ—à–µ–ª–µ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        #bot.send_message(message.chat.id,GetReGData(user, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞', message.from_user.first_name), parse_mode= 'Markdown')
        
        bot.delete_message(message.chat.id, message.id)
        bot.delete_message(message.chat.id, msg_to_delete3.id)
       # bot.send_message(message.chat.id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥', reply_markup= Inline)
        #bot.send_message(message.chat.id, '–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?', reply_markup= Inline)
        bot.send_message(message.chat.id, '‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –æ–±–º–µ–Ω–µ:\n üí∞–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {} BTC\n üëõ–ê–¥—Ä–µ—Å: {} \n üí∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ : {} \n \n üöÄ–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: –æ—Ç 30 –¥–æ 120 –º–∏–Ω—É—Ç \n ‚ÄºÔ∏è–í—Ä–µ–º—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –∏ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –∏–∑-–∑–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Blockchain.\n \n ‚úÖ–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª:'.format(y,q, y),reply_markup=Inline)
        
       #msg = (group_id, GetReGData(user, '–ó–∞—è–≤–∫–∞ –æ—Ç ', bot.get_me().username), parse_mode= 'Markdown')
        #bot.send_message(group_id, GetReGData(user, '–ó–∞—è–≤–∫–∞ –æ—Ç ', bot.get_me().username), parse_mode= 'Markdown')
          
        

    except Exception as e:
        #total = AddressBalance().action('btc', message.text)
        Inline = types.InlineKeyboardMarkup()
        Back = types.InlineKeyboardButton(text = 'üîô–ù–∞–∑–∞–¥' , callback_data= 'Back_buy3')
        Inline.add(Back)
        #msg2 = bot.reply_to(message,'–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ–≤–µ—Ä–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup = Inline)
        msg2 = bot.send_message(message.chat.id,'–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ–≤–µ—Ä–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑',reply_markup= Inline)
        bot.register_next_step_handler(msg2, buy_btc_2)
        
    
    #group_id = 
    #chat_id = message.chat.id
    #user = user_dict[chat_id]
    #user.wallet = message.text
    #Inline = types.InlineKeyboardMarkup()
    #Back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥' , callback_data= 'Back')   
    #Inline.add(Back)

    

    #bot.send_message(message.chat.id,GetReGData(user, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞', message.from_user.first_name), parse_mode= 'Markdown')
    #bot.send_message(message.chat.id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥', reply_markup= Inline)
    #bot.send_message(group_id, GetReGData(user, '–ó–∞—è–≤–∫–∞ –æ—Ç ', bot.get_me().username), parse_mode= 'Markdown')
   #bot.send_message(group_id, (user, 'id', bot.get_me().id),parse_mode = 'Markodown')
    

   


def GetReGData(user,title,name):
    t = Template ('\n –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ BTC: *$summ* \n –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: #*$wallet* \n –°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: *$pay* \n') 
    #$Title *$name*
    return t.substitute({
    'title' : title,
    'name' : name,
    'summ' : user.sum,
    'wallet' : user.wallet,
    'pay' : user.pay
         
    })      


def sell_btc(message):
    global v
    global g
    global msg_to_delete2
    price= tracker2.scrape()
    rub_course = data2
    bot.delete_message(message.chat.id, msg_to_delete5.id)

    try:
        g = float (message.text)
    
        if (g <= 0.1 and g >= 0.0003):
            chat_id = message.chat.id
           
            user_dict2 [chat_id]= user2(message.text)
            user2.pay =math.floor(((g * price) *  rub_course) * 0.75)
            v =  math.floor(((g * price) *  rub_course) * 0.75)
            #msg = bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã')
            msg_to_delete2 = bot.send_message(message.chat.id, '‚¨áÔ∏è–ü—Ä–æ–¥–∞–∂–∞ BTC: {} BTC \nüí∞–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é:  {} ‚ÇΩ \n üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã'.format(g,v))

            
            bot.delete_message(message.chat.id, message.id)
            bot.register_next_step_handler(msg_to_delete2,sell_btc_2)
        else:
            #msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
            Inline = types.InlineKeyboardMarkup()
            Back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥' , callback_data= 'Back')
            Inline.add(Back)
            
            msg = bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
            bot.register_next_step_handler(msg,sell_btc)
            


    except ValueError:
        Inline = types.InlineKeyboardMarkup()
        Back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥' , callback_data= 'Back')
        Inline.add(Back)
        #msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', reply_markup = Inline)
        
        msg = bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
        bot.register_next_step_handler(msg,sell_btc)
        


def sell_btc_2(message):
    global t
    t = str(message.text)

    try:
        Inline = types.InlineKeyboardMarkup()
        Back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥' , callback_data= 'Back')
        No = types.InlineKeyboardButton(text= 'üîô–ù–∞–∑–∞–¥', callback_data= 'btc_sell_no') 
        Yes = types.InlineKeyboardButton(text= '‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data= 'btc_sell_yes')   
        Inline.add(No, Yes)

        group_id = 'your_group_ID' 
        chat_id = message.chat.id
        user = user_dict2[chat_id]
        user.wallet = message.text
        

        #total = blockcypher.get_total_balance(message.text)
        #card_number = list(t)


        #check_digit = card_number.pop()


        #card_number.reverse()

        #processed_digits = []

        #for index, digit in enumerate(card_number):
         #   if index % 2 == 0:
          #      doubled_digit = int(digit) * 2

             
           #     if doubled_digit > 9:
            #        doubled_digit = doubled_digit - 9

                 #   processed_digits.append(doubled_digit)
            #else:
             #   processed_digits.append(int(digit))

       # total = int(check_digit) + sum(processed_digits)


        #if total % 10 == 0:
        if CreditCardChecker(t).valid():
            
            bot.delete_message(message.chat.id, message.id)
            bot.delete_message(message.chat.id, msg_to_delete2.id)
            
            #bot.send_message(message.chat.id,GetReGData2(user, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞', message.from_user.first_name), parse_mode= 'Markdown')
            #bot.send_message(message.chat.id, '–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?', reply_markup = Inline)
            msg = bot.send_message(message.chat.id, '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –æ–±–º–µ–Ω–µ:\n \n üí∞–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏: {} BTC \n üí≥–†–µ–∫–≤–∏–∑–∏—Ç—ã: {}  \n üí∞–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏: {} ‚ÇΩ\n \n üöÄ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: –æ—Ç 30 –¥–æ 120 –º–∏–Ω—É—Ç \n !!–í—Ä–µ–º—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –∏ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è \n \n ‚úÖ –ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ,  —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –ø–æ–¥—Ç–≤—Ä–µ–¥–∏—Ç—å'.format(g,t,v),reply_markup= Inline)


            #bot.send_message(group_id, GetReGData2(user, '–ó–∞—è–≤–∫–∞ –æ—Ç ', bot.get_me().username), parse_mode= 'Markdown')
        else:
            Inline = types.InlineKeyboardMarkup()
            Back = types.InlineKeyboardButton(text = 'üîô–ù–∞–∑–∞–¥' , callback_data= 'Back')
            Inline.add(Back)
            #msg2 = bot.reply_to(message,'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ–≤–µ—Ä–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup= Inline)
            
            msg2 = bot.send_message(message.chat.id,'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ–≤–µ—Ä–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑',reply_markup= Inline)
        
            bot.register_next_step_handler(msg2, sell_btc_2)  
             
        
    except Exception as e:
        Inline = types.InlineKeyboardMarkup()
        Back = types.InlineKeyboardButton(text = 'üîô–ù–∞–∑–∞–¥' , callback_data= 'Back')
        Inline.add(Back)
        #msg2 = bot.reply_to(message,'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ–≤–µ—Ä–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup= Inline)
        
        msg2 = bot.send_message(message.chat.id,'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ–≤–µ—Ä–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑',reply_markup=Inline)
        bot.register_next_step_handler(msg2, sell_btc_2)
        





def GetReGData2(user,title,name):
    t = Template (' \n –°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏ BTC: *$summ* \n –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: *$wallet* \n –°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: *$pay* \n') 
    #$Title *$name*
    return t.substitute({
    'title' : title,
    'name' : name,
    'summ' : user.sum,
    'wallet' : user.wallet,
    'pay' : user.pay
         
    })     


def buy_usdt(message): #–≤–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ USDT
    rub_course = data2
    global z
    global o
    global msg_to_delete4
    bot.delete_message(message.chat.id, msg_to_delete8.id)
    try:
        o = int (message.text)
        
    #price= course2()
    
        if (o >= 1000 and o <= 200000):
            chat_id = message.chat.id
            user_dict3 [chat_id]= user3(message.text)
            user3.pay = math.floor((o / rub_course) * 0.75)
            z = math.floor((o / rub_course) * 0.75)
            #msg = bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ ')
            msg_to_delete4 = bot.send_message(message.chat.id, '‚¨áÔ∏è–ü–æ–∫—É–ø–∫–∞ USDT: {} ‚ÇΩ \nüí∞–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:  {} USDT\n –í–≤–µ–¥–∏—Ç–µ USDT –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:  {} USDT'.format(o,z,z))
            
           
            bot.delete_message(message.chat.id, message.id)
            bot.register_next_step_handler(msg_to_delete4,buy_usdt_2)
        else :
            msg = bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
            #msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
            bot.register_next_step_handler(msg,buy_usdt)

    except ValueError:
        Inline = types.InlineKeyboardMarkup()
        Back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥' , callback_data= 'Back_buy3')
        Inline.add(Back)
        #msg2 = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
        msg2 = bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
        bot.register_next_step_handler(msg2, buy_usdt)    

    
def buy_usdt_2(message): # –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
    global f
    f = str (message.text)
    try:
        Inline = types.InlineKeyboardMarkup()
        Back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥' , callback_data= 'Back')
        No = types.InlineKeyboardButton(text= 'üîô–ù–∞–∑–∞–¥', callback_data= 'usdt_buy_no')
        Yes = types.InlineKeyboardButton(text= '‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data= 'usdt_buy_yes')    
        Inline.add(No, Yes)
    
        group_id = 'your_group_ID'   
        chat_id = message.chat.id
        user = user_dict3[chat_id]
        user.wallet = message.text
        
        
        #card_number = list(x)


        #check_digit = card_number.pop()


        #card_number.reverse()

        #processed_digits = []

        #for index, digit in enumerate(card_number):
           # if index % 2 == 0:
              #  doubled_digit = int(digit) * 2

             
                #if doubled_digit > 9:
                #    doubled_digit = doubled_digit - 9

                #    processed_digits.append(doubled_digit)
            #else:
                #processed_digits.append(int(digit))

        #total = int(check_digit) + sum(processed_digits)


       # if total % 10 == 0:
         
        

        binance_testnet_rpc_url = "https://data-seed-prebsc-1-s1.binance.org:8545/"
        web3 = Web3(Web3.HTTPProvider(binance_testnet_rpc_url))
        wallet_address = f
        balance = Web3.to_checksum_address(wallet_address)


        #bot.send_message(message.chat.id,GetReGData3(user, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞', message.from_user.first_name), parse_mode= 'Markdown')
       
        bot.delete_message(message.chat.id, message.id)
        bot.delete_message(message.chat.id, msg_to_delete4.id)
        #bot.send_message(message.chat.id,config.chat.id, GetReGData(user, '–ó–∞—è–≤–∫–∞ –æ—Ç ', bot.get_me().username), parse_mode= 'Markdown')
        #bot.send_message(message.chat.id,'–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?', reply_markup= Inline)
        bot.send_message(message.chat.id, '‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –æ–±–º–µ–Ω–µ:\n üí∞–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {} USDT\n üëõ–ê–¥—Ä–µ—Å: {} \n –í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏: {} \n \n üöÄ–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: –æ—Ç 30 –¥–æ 120 –º–∏–Ω—É—Ç \n ‚ÄºÔ∏è–í—Ä–µ–º—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –∏ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –∏–∑-–∑–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Blockchain.\n \n ‚úÖ–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª:'.format(z,f,z),reply_markup=Inline) 
        #bot.send_message(group_id, GetReGData3(user, '–ó–∞—è–≤–∫–∞ –æ—Ç ', bot.get_me().username), parse_mode= 'Markdown')

        #else:
         #   Inline = types.InlineKeyboardMarkup()
          #  Back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥' , callback_data= 'Back_buy3')
           # Inline.add (Back)
           # msg = bot.reply_to(message, '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ–≤–µ—Ä–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup = Inline)
           # bot.register_next_step_handler(msg,buy_usdt_2)    



    except Exception as e:
        Inline = types.InlineKeyboardMarkup()
        Back = types.InlineKeyboardButton(text = 'üîô–ù–ù–∞–∑–∞–¥' , callback_data= 'Back_buy3')
        Inline.add(Back)
        #msg2 = bot.reply_to(message, '–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ–≤–µ—Ä–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup = Inline)
        msg2 = bot.send_message(message.chat.id,'–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ–≤–µ—Ä–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑',reply_markup=Inline)
        bot.register_next_step_handler(msg2, buy_usdt_2)


   


def GetReGData3(user,title,name):
    t = Template (' \n –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ USDT: *$summ* \n –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: #*$wallet* \n –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: *$pay* \n') 
    #$Title *$name*
    return t.substitute({
    'title' : title,
    'name' : name,
    'summ' : user.sum,
    'wallet' : user.wallet,
    'pay' : user.pay
         
    }) 


def sell_usdt(message):
    global msg_to_delete1
    global a
    global c 
    rub_course = data2
    bot.delete_message(message.chat.id, msg_to_delete6.id)
    try:
        a = int(message.text)

        if (a <= 3000 and a >= 10) :
            chat_id = message.chat.id
            user_dict4 [chat_id]= user4(message.text)
            user4.pay = math.floor((a * rub_course) * 0.75)
            c = math.floor((a * rub_course) * 0.75)
            #msg = bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∫–∞—Ä—Ç—É')
            msg_to_delete1 = bot.send_message(message.chat.id, '‚¨áÔ∏è–ü—Ä–æ–¥–∞–∂–∞ USDT: {} USDT \nüí∞–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:  {} ‚ÇΩ \n üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã'.format(a,c))

            
            bot.delete_message(message.chat.id, message.id)
            bot.register_next_step_handler(msg_to_delete1,sell_usdt_2)
        else:
            Inline = types.InlineKeyboardMarkup()
            Back = types.InlineKeyboardButton(text = 'üîô–ù–∞–∑–∞–¥' , callback_data= 'Back')
            Inline.add(Back)
            #msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
            msg = bot.send_message(message.chat.id,'–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',reply_markup= Inline)
            bot.register_next_step_handler(msg,sell_usdt)

    except ValueError:
        Inline = types.InlineKeyboardMarkup()
        Back = types.InlineKeyboardButton(text = 'üîô–ù–∞–∑–∞–¥' , callback_data= 'Back')
        Inline.add(Back)
        #msg2= bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', reply_markup = Inline)
        msg2 = bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',reply_markup= Inline)
        bot.register_next_step_handler(msg2, sell_usdt)
        

def sell_usdt_2(message):
    global p
    p = str(message.text)

    try:

        Inline = types.InlineKeyboardMarkup()
        Back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥' , callback_data= 'Back')
        No = types.InlineKeyboardButton(text= 'üîô–ù–∞–∑–∞–¥', callback_data= 'usdt_sell_no')
        Yes = types.InlineKeyboardButton(text= '‚úÖ –î–∞', callback_data= 'usdt_sell_yes')    
        Inline.add(No,Yes)

        Inline2 = types.InlineKeyboardMarkup()
        Back_button = types.InlineKeyboardButton(text = 'üîô–ù–∞–∑–∞–¥' , callback_data= 'Back')
        Inline2.add(Back_button)

        group_id = 'your_group_ID'
        chat_id = message.chat.id
        user = user_dict4[chat_id]
        user.wallet = message.text

        #binance_testnet_rpc_url = "https://data-seed-prebsc-1-s1.binance.org:8545/"
        #web3 = Web3(Web3.HTTPProvider(binance_testnet_rpc_url))
        #wallet_address = x
        #balance = Web3.to_checksum_address(wallet_address)
        
        #card_number = list(p)


        #check_digit = card_number.pop()


        #card_number.reverse()

       # processed_digits = []

        #for index, digit in enumerate(card_number):
           # if index % 2 == 0:
            #    doubled_digit = int(digit) * 2

             
              #  if doubled_digit > 9:
               #     doubled_digit = doubled_digit - 9

               #     processed_digits.append(doubled_digit)
            #else:
            #    processed_digits.append(int(digit))

       # total = int(check_digit) + sum(processed_digits)


        #if total % 10 == 0:
        if CreditCardChecker(p).valid():
            
            bot.delete_message(message.chat.id, message.id)
            bot.delete_message (message.chat.id, msg_to_delete1.id)
   


            #bot.send_message(message.chat.id,GetReGData4(user, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞', message.from_user.first_name), parse_mode= 'Markdown')
            #bot.send_message(message.chat.id, '–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?', reply_markup= Inline)
            msg = bot.send_message(message.chat.id, '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –æ–±–º–µ–Ω–µ:\n \n üí∞–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏: {} USDT \n üí≥–†–µ–∫–≤–∏–∑–∏—Ç—ã: {}  \n üí∞–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏: {} ‚ÇΩ\n \n üöÄ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: –æ—Ç 30 –¥–æ 120 –º–∏–Ω—É—Ç \n !!–í—Ä–µ–º—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –∏ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è \n \n ‚úÖ–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å '.format(a,p,c),reply_markup= Inline)

            #bot.send_message(group_id, GetReGData4(user, '–ó–∞—è–≤–∫–∞ –æ—Ç ', bot.get_me().username), parse_mode= 'Markdown')

        else:
            Inline2 = types.InlineKeyboardMarkup()
            Back_button = types.InlineKeyboardButton(text = 'üîô–ù–∞–∑–∞–¥' , callback_data= 'Back')
            Inline2.add(Back_button)
            #msg2 = bot.reply_to(message, '–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –Ω–µ–≤–µ—Ä–Ω–∞,  –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup = Inline)
            msg2 = bot.send_message(message.chat.id,'–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –Ω–µ–≤–µ—Ä–Ω–∞,  –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑',reply_markup=Inline2)
            bot.register_next_step_handler(msg2, sell_usdt_2)
 



    except Exception as e:
        Inline2 = types.InlineKeyboardMarkup()
        Back_button = types.InlineKeyboardButton(text = 'üîô–ù–∞–∑–∞–¥' , callback_data= 'Back_sell3')
        Inline2.add(Back_button)
        #msg2 = bot.reply_to(message, '–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –Ω–µ–≤–µ—Ä–Ω–∞,  –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup = Inline)
        msg2 = bot.send_message(message.chat.id,'–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –Ω–µ–≤–µ—Ä–Ω–∞,  –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup= Inline2)
        bot.register_next_step_handler(msg2, sell_usdt_2)




def GetReGData4(user,title,name):
    t = Template (' \n –°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏ USDT: *$summ* \n –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã : *$wallet* \n –°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: *$pay* \n') 
    #$Title *$name*
    return t.substitute({
    'title' : title,
    'name' : name,
    'summ' : user.sum,
    'wallet' : user.wallet,
    'pay' : user.pay
         
    })

#@bot.message_handler(commands = ['calculator'])

# def check_btc_buy_course(message):
#      price= tracker2.scrape()
#      rub_course = data2
#      global input_check_btc_buy_course, calculate_check_btc_buy_course
     
#      try:
#          input_check_btc_buy_course = int(message.text)
#          calculate_check_btc_buy_course = ((input_check_btc_buy_course / rub_course)/ price) * 0.75
#          msg = bot.send_message(message.chat.id,'–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ BTC –Ω–∞ —Å—É–º–º—É {} RUB \n –í—ã –ø–æ–ª—É—á–∏—Ç–µ {} BTC '.format(input_check_btc_buy_course,calculate_check_btc_buy_course))
#          bot.register_next_step_handler(msg, check_btc_buy_course)

#      except ValueError:
#          #Inline = types.InlineKeyboardMarkup()
#          #Back = types.InlineKeyboardMarkup(text = '–ù–∞–∑–∞–¥',reply_markup = Inline)
#          #Inline.add(Back)
#          msg2 = bot.send_message(message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
#          bot.register_next_step_handler(msg2, check_btc_buy_course)

       
# def check_btc_sell_course(message):
#     price= tracker2.scrape()
#     rub_course = data2
#     global input_check_btc_sell_course, calculate_check_btc_sell_course
#     try:
#         input_check_btc_sell_course = float(message.text)
#         calculate_check_btc_sell_course = ((input_check_btc_sell_course * price) * rub_course) * 0.75 
#         msg3 = bot.send_message(message.chat.id,'–ü–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏ BTC –Ω–∞ —Å—É–º–º—É {} BTC\n –í—ã –ø–æ–ª—É—á–∏—Ç–µ {} RUB '.format(input_check_btc_sell_course,calculate_check_btc_sell_course))
#         bot.register_next_step_handler(msg3, check_btc_sell_course) 

#     except ValueError:
#         msg4 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
#         bot.register_next_step_handler(msg4, check_btc_sell_course)    

# def check_usdt_buy_course(message):
#     rub_course = data2
#     global input_check_usdt_buy_course, calculate_check_usdt_buy_course
#     try:
#         input_check_usdt_buy_course = int(message.text)
#         calculate_check_usdt_buy_course = ((input_check_usdt_buy_course) / rub_course) * 0.75
#         msg5 = bot.send_message(message.chat.id,'–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ USDT –Ω–∞ —Å—É–º–º—É {} RUB\n –í—ã –ø–æ–ª—É—á–∏—Ç–µ {} USDT '.format(input_check_usdt_buy_course, calculate_check_usdt_buy_course))
#         bot.register_next_step_handler(msg5, check_btc_sell_course) 
#     except ValueError:
#         msg6 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
#         bot.register_next_step_handler(msg6, check_usdt_buy_course)

# def check_usdt_sell_course(message):
#     rub_course = data2
#     global input_check_usdt_sell_course,calculate_check_usdt_sell_course
#     try:
#         input_check_usdt_sell_course = int (message.text)
#         calculate_check_usdt_sell_course = ((input_check_usdt_buy_course) * rub_course) * 0.75
#         msg7 = bot.send_message(message.chat.id,'–ü–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏ USDT –Ω–∞ —Å—É–º–º—É {} USDT \n –í—ã –ø–æ–ª—É—á–∏—Ç–µ {} RUB '.format(input_check_usdt_sell_course, calculate_check_usdt_sell_course))
#         bot.register_next_step_handler(msg7, check_btc_sell_course) 
#     except ValueError:
#         msg8 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
#         bot.register_next_step_handler(msg8, check_usdt_sell_course)       



def calculator(message):  
    global value 
      

    if value == '':
            Calculator_usdt = types.InlineKeyboardMarkup(row_width= 3)
            button_1 = types.InlineKeyboardButton(text = '1', callback_data= '1')
            button_2 = types.InlineKeyboardButton(text = '2', callback_data= '2')
            button_3 = types.InlineKeyboardButton(text = '3', callback_data= '3')
            button_4 = types.InlineKeyboardButton(text= '4', callback_data= '4')
            button_5 = types.InlineKeyboardButton(text = '5', callback_data= '5')
            button_6 = types.InlineKeyboardButton(text= '6', callback_data= '6')
            button_7 = types.InlineKeyboardButton(text= '7', callback_data= '7')
            button_8 = types.InlineKeyboardButton(text = '8', callback_data= '8')
            button_9 = types.InlineKeyboardButton(text = '9', callback_data= '9')
            button_10 = types.InlineKeyboardButton(text = '=', callback_data= '=')
            button_11 = types.InlineKeyboardButton(text= 'C', callback_data= 'C')
            button_12 = types.InlineKeyboardButton(text = '0', callback_data= '0')
            button_13 = types.InlineKeyboardButton(text = '.', callback_data= '.')
           
            Calculator_usdt.add(button_1, button_2, button_3, button_4, button_5, button_6, button_7, button_8, button_9, button_13, button_12, button_11, button_10)
            bot.send_message(message.from_user.id, '0', reply_markup= Calculator_usdt)
            
    else:
            Calculator_usdt = types.InlineKeyboardMarkup(row_width= 3)
            button_1 = types.InlineKeyboardButton(text = '1', callback_data= '1')
            button_2 = types.InlineKeyboardButton(text = '2', callback_data= '2')
            button_3 = types.InlineKeyboardButton(text = '3', callback_data= '3')
            button_4 = types.InlineKeyboardButton(text= '4', callback_data= '4')
            button_5 = types.InlineKeyboardButton(text = '5', callback_data= '5')
            button_6 = types.InlineKeyboardButton(text= '6', callback_data= '6')
            button_7 = types.InlineKeyboardButton(text= '7', callback_data= '7')
            button_8 = types.InlineKeyboardButton(text = '8', callback_data= '8')
            button_9 = types.InlineKeyboardButton(text = '9', callback_data= '9')
            button_10 = types.InlineKeyboardButton(text = '=', callback_data= '=')
            button_11 = types.InlineKeyboardButton(text= 'C', callback_data= 'C')
            button_12 = types.InlineKeyboardButton(text = '0', callback_data= '0')
            button_13 = types.InlineKeyboardButton(text = '.', callback_data= '.')
           
            Calculator_usdt.add(button_1, button_2, button_3, button_4, button_5, button_6, button_7, button_8, button_9, button_13, button_12, button_11, button_10)
            bot.send_message(message.chat.id, value, reply_markup= Calculator_usdt)


               
    # if value == '':
    #             Calculator_usdt = types.InlineKeyboardMarkup(row_width= 3)
    #             button_1 = types.InlineKeyboardButton(text = '1', callback_data= '1')
    #             button_2 = types.InlineKeyboardButton(text = '2', callback_data= '2')
    #             button_3 = types.InlineKeyboardButton(text = '3', callback_data= '3')
    #             button_4 = types.InlineKeyboardButton(text= '4', callback_data= '4')
    #             button_5 = types.InlineKeyboardButton(text = '5', callback_data= '5')
    #             button_6 = types.InlineKeyboardButton(text= '6', callback_data= '6')
    #             button_7 = types.InlineKeyboardButton(text= '7', callback_data= '7')
    #             button_8 = types.InlineKeyboardButton(text = '8', callback_data= '8')
    #             button_9 = types.InlineKeyboardButton(text = '9', callback_data= '9')
    #             button_10 = types.InlineKeyboardButton(text = '=', callback_data= '=')
    #             button_11 = types.InlineKeyboardButton(text= 'C', callback_data= 'C')
    #             button_12 = types.InlineKeyboardButton(text = '0', callback_data= '0')
    #             button_13 = types.InlineKeyboardButton(text = '.', callback_data= '.')
           
    #             Calculator_usdt.add(button_1, button_2, button_3, button_4, button_5, button_6, button_7, button_8, button_9, button_13, button_12, button_11, button_10)
    #             bot.send_message(message.chat.id, '0', reply_markup= Calculator_usdt)
    # else:
    #             Calculator_usdt = types.InlineKeyboardMarkup(row_width= 3)
    #             button_1 = types.InlineKeyboardButton(text = '1', callback_data= '1')
    #             button_2 = types.InlineKeyboardButton(text = '2', callback_data= '2')
    #             button_3 = types.InlineKeyboardButton(text = '3', callback_data= '3')
    #             button_4 = types.InlineKeyboardButton(text= '4', callback_data= '4')
    #             button_5 = types.InlineKeyboardButton(text = '5', callback_data= '5')
    #             button_6 = types.InlineKeyboardButton(text= '6', callback_data= '6')
    #             button_7 = types.InlineKeyboardButton(text= '7', callback_data= '7')
    #             button_8 = types.InlineKeyboardButton(text = '8', callback_data= '8')
    #             button_9 = types.InlineKeyboardButton(text = '9', callback_data= '9')
    #             button_10 = types.InlineKeyboardButton(text = '=', callback_data= '=')
    #             button_11 = types.InlineKeyboardButton(text= 'C', callback_data= 'C')
    #             button_12 = types.InlineKeyboardButton(text = '0', callback_data= '0')
    #             button_13 = types.InlineKeyboardButton(text = '.', callback_data= '.')
           
    #             Calculator_usdt.add(button_1, button_2, button_3, button_4, button_5, button_6, button_7, button_8, button_9, button_13, button_12, button_11, button_10)
    #             bot.send_message(message.chat.id, value, reply_markup= Calculator_usdt)


        #     Calculator_usdt = types.InlineKeyboardMarkup(row_width= 3)
        #     global value 
        #     global old_value
        # button_1 = types.InlineKeyboardButton(text = '1', callback_data= '1')
        # button_2 = types.InlineKeyboardButton(text = '2', callback_data= '2')
        # button_3 = types.InlineKeyboardButton(text = '3', callback_data= '3')
        # button_4 = types.InlineKeyboardButton(text= '4', callback_data= '4')
        # button_5 = types.InlineKeyboardButton(text = '5', callback_data= '5')
        # button_6 = types.InlineKeyboardButton(text= '6', callback_data= '6')
        # button_7 = types.InlineKeyboardButton(text= '7', callback_data= '7')
        # button_8 = types.InlineKeyboardButton(text = '8', callback_data= '8')
        # button_9 = types.InlineKeyboardButton(text = '9', callback_data= '9')
        # button_10 = types.InlineKeyboardButton(text = '=', callback_data= '=')
        # button_11 = types.InlineKeyboardButton(text= 'C', callback_data= 'C')
        # button_12 = types.InlineKeyboardButton(text = '0', callback_data= '0')
        # button_13 = types.InlineKeyboardButton(text = '.', callback_data= '.')
        # Calculator_usdt.add(button_1, button_2, button_3, button_4, button_5, button_6, button_7, button_8, button_9, button_13, button_12, button_11, button_10)
    
        
    #if message.id == 'C':
     #       value = ''
    #elif message.id == '=':
    #        value = float(value) * 1.1
    #        value = str(value)
            
            
    #else:
    #    value += message.id
            

    #    if value != old_value:
     #     if value == '':
     #         bot.edit_message_text(chat_id= message.chat.id, message_id= message.id, text= '0', reply_markup= Calculator_usdt)
     #     else:
     #          bot.edit_message_text(chat_id= message.chat.id, message_id= message.id, text= value, reply_markup= Calculator_usdt)     
 
      #  old_value = value         
            
            

    
@bot.message_handler(commands = ['start'])


def start(message):
 
 

 bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
 Inline = types.InlineKeyboardMarkup(row_width= 2)
 item1 = types.InlineKeyboardButton(text = '‚¨áÔ∏è–ö—É–ø–∏—Ç—å' , callback_data= 'buy')
 item2 = types.InlineKeyboardButton(text = '‚¨ÜÔ∏è–ü—Ä–æ–¥–∞—Ç—å', callback_data='sell') 
 item3 = types.InlineKeyboardButton(text = 'üí¨–ß–∞—Ç', url = 'https://t.me/+c2iY0XEkYzlhZGNk')
 item4 = types.InlineKeyboardButton(text = 'üì¢–ö–∞–Ω–∞–ª', url= 'https://t.me/candyshop_exchange')
 item5 = types.InlineKeyboardButton(text = '‚ùì–û—Ç–∑—ã–≤—ã', url= 'https://t.me/candyshop_exchange_reviews')
 item6 = types.InlineKeyboardButton(text = 'üë®üèº‚ÄçüöÄ–û–ø–µ—Ä–∞—Ç–æ—Ä', url= 'https://t.me/candyshop_exchange_support')
 item7 = types.InlineKeyboardButton(text = 'üìà–ö—É—Ä—Å', callback_data= 'course')
 #Course = types.InlineKeyboardButton(text= 'üìà–ö—É—Ä—Å', switch_inline_query_current_chat= '')

 item8 = types.InlineKeyboardButton(text = '‚ÑπÔ∏è–ò–Ω—Ñ–æ', callback_data= 'info')

 

 Inline.add(item1, item2, item3, item4, item5, item6, item7, item8)

 
 
 
 bot.send_message(message.chat.id, ' üç≠ CANDYSHOP EXCHANGE \n \n üîÑ–ö—É–ø–∏—Ç—å –∏ –ø—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n üîê –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ \n üí´ –ë—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ \n üî• –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ 24/7 \n' , reply_markup = Inline)
 
 
 
 

 

 
     

           
 
@bot.callback_query_handler(func = lambda call: True )

def answer(call):
        username= call.message.chat.username
        number = random.randint(10000, 99999)
       
        #user_input  = call.message.text
        #time.sleep(1)
        #bot.delete_message(call.chat.id, user_input.id)

        
    
        if call.data == 'chat':
          Inline = types.InlineKeyboardMarkup()
          url_chat = types.InlineKeyboardButton(text = '–ß–∞—Ç', url = 'https://t.me/+c2iY0XEkYzlhZGNk')
          back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data= 'Back')
          Inline.add(back,url_chat)

          bot.send_message(call.message.chat.id,'–í—ã –∑–∞—à–ª–∏ –≤ —á–∞—Ç',reply_markup = Inline)

        #elif call.data == 'channel':
         #   Inline = types.InlineKeyboardMarkup()
          #  back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data= 'Back')
           # Inline.add(back)

          #  bot.send_message(call.message.chat.id,'https://t.me/candyshop_exchange_channel', reply_markup = Inline)
            

        #elif call.data == 'Test':
        #    Inline = types.InlineKeyboardMarkup()
         #   test1 = types.InlineKeyboardButton(text= 'test1', callback_data= 'test1')
          #  test2 = types.InlineKeyboardButton(text='test2',callback_data='test2')
          #  Inline.add(test1,test2)
           # bot.edit_message_text(chat_id=call.message.chat.id, message_id= call.message.id, text= 'eue')
           # bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id,reply_markup=Inline)

       # elif call.data == 'otzivi':
        #    Inline = types.InlineKeyboardMarkup()
         #   back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data= 'Back')
          #  Inline.add(back)
            
           # bot.send_message(call.message.chat.id, ' –í—ã –∑–∞—à–ª–∏ –≤ –û—Ç–∑—ã–≤—ã', reply_markup = Inline)
            #bot.send_message(call.message.chat.id, ' –°—Å—ã–ª–∫–∞ –Ω–∞ –û—Ç–∑—ã–≤—ã\n https://vk.com/danilabaxbax ')

        #elif call.data == 'otzivi':
         #   Inline = types.InlineKeyboardMarkup()
          #  back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data= 'Back')
           # Inline.add(back)

            #bot.send_message(call.message.chat.id, ' –í—ã –∑–∞—à–ª–∏ –≤ –û—Ç–∑—ã–≤—ã', reply_markup = Inline)
            #bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=' –í—ã –∑–∞—à–ª–∏ –≤ –û—Ç–∑—ã–≤—ã')
            #bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup=Inline)    
  

        #elif call.data == 'operator':
         #   Inline = types.InlineKeyboardMarkup()
          #  back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data= 'Back')
           # Inline.add(back)

            #bot.send_message(call.message.chat.id,'@candyshop_exhange', reply_markup = Inline)

        #elif call.data == 'course':
         #   Inline = types.InlineKeyboardMarkup()
          #  back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data= 'Back')
           # Inline.add(back)
            #course_message = course()
            #bot.send_message(call.message.chat.id, f'{course_message}',reply_markup= Inline)
            #bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=f'{course_message}')
            #bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup=Inline)


        elif call.data == 'course':
             Inline = types.InlineKeyboardMarkup(row_width= 2)
             Buy = types.InlineKeyboardButton(text='‚¨áÔ∏è–ö—É–ø–∏—Ç—å',callback_data= 'course_buy')
             Sell = types.InlineKeyboardButton(text= '‚¨ÜÔ∏è–ü—Ä–æ–¥–∞—Ç—å', callback_data= 'course_sell')
             Back = types.InlineKeyboardButton(text= 'üîô–ù–∞–∑–∞–¥', callback_data= 'Back')
             Inline.add(Buy,Sell,Back) 

             bot.edit_message_text(chat_id= call.message.chat.id, message_id= call.message.id, text= '–ö—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å?')
             bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup= Inline)


        elif call.data == 'course_buy':
            Inline = types.InlineKeyboardMarkup(row_width= 2 ) 
            BTC = types.InlineKeyboardButton(text='ü™ôBTC', callback_data= 'course_buy_btc')
            USDT = types.InlineKeyboardButton(text= 'üíµUSDT', callback_data= 'course_buy_usdt')
            Back = types.InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥',callback_data= 'Back')
            Inline.add(BTC,USDT,Back)

            bot.edit_message_text(chat_id= call.message.chat.id, message_id= call.message.id, text= '–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?')
            bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup= Inline)

        elif call.data == 'course_buy_btc':
            Inline = types.InlineKeyboardMarkup(row_width= 1  )
            Check_BTC_BUY = types.InlineKeyboardButton(text= 'üìà–ü–æ—Å—á–∏—Ç–∞—Ç—å –∫—É—Ä—Å',switch_inline_query_current_chat= ' BTC1 ')
            Back = types.InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data= 'Back')
            Inline.add (Check_BTC_BUY,Back)

            msg = bot.edit_message_text(chat_id= call.message.chat.id, message_id= call.message.id, text= '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ BTC')
            bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup= Inline)
            #bot.register_next_step_handler(msg, check_btc_buy_course)

        elif call.data == 'course_buy_usdt':
            Inline = types.InlineKeyboardMarkup(row_width= 1)
            Check_USDT_BUY = types.InlineKeyboardButton(text= 'üìà–ü–æ—Å—á–∏—Ç–∞—Ç—å –∫—É—Ä—Å',switch_inline_query_current_chat= ' tether1 ')
            Back = types.InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥',callback_data='Back')
            Inline.add(Check_USDT_BUY,Back)

            msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id= call.message.id, text='–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã –∫—É–ø–∏—Ç—å USDT?')
            bot.edit_message_reply_markup(chat_id= call.message.chat.id,message_id= call.message.id, reply_markup= Inline)
            #bot.register_next_step_handler(msg, check_usdt_buy_course)



        elif call.data == 'course_sell':
            Inline = types.InlineKeyboardMarkup(row_width= 2)
            BTC = types.InlineKeyboardButton(text= 'ü™ôBTC',callback_data= 'course_sell_btc')
            USDT = types.InlineKeyboardButton(text= 'üíµUSDT', callback_data='course_sell_usdt')
            Back = types.InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥',callback_data= 'Back')
            Inline.add(BTC,USDT, Back)

            bot.edit_message_text(chat_id= call.message.chat.id, message_id= call.message.id, text = '–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å?' )
            bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup= Inline)


        elif call.data =='course_sell_btc':
            Inline = types.InlineKeyboardMarkup(row_width= 1)
            Check_BTC_SELL = types.InlineKeyboardButton(text= 'üìà–ü–æ—Å—á–∏—Ç–∞—Ç—å –∫—É—Ä—Å',switch_inline_query_current_chat= ' BTC2 ')

            Back = types.InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥',callback_data= 'Back')
            Inline.add(Check_BTC_SELL,Back)

            msg = bot.edit_message_text(chat_id= call.message.chat.id,message_id= call.message.id, text='–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å BTC?')
            bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id,reply_markup=Inline)
            #bot.send_message(call.message.chat.id, '–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å BTC')
            #bot.register_next_step_handler(msg, check_btc_sell_course)
              

        elif call.data =='course_sell_usdt':
            Inline = types.InlineKeyboardMarkup(row_width= 1)
            Check_USDT_SELL = types.InlineKeyboardButton(text= 'üìà–ü–æ—Å—á–∏—Ç–∞—Ç—å –∫—É—Ä—Å',switch_inline_query_current_chat= ' tether2 ')

            Back = types.InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥',callback_data= 'Back')
            Inline.add(Check_USDT_SELL,Back)

            msg = bot.edit_message_text(chat_id= call.message.chat.id, message_id= call.message.id, text='–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å USDT?')
            bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup=Inline)       
            #bot.register_next_step_handler(msg, check_usdt_sell_course)
        
        elif call.data == 'info':
            Inline = types.InlineKeyboardMarkup(row_width=1)
            Info2 = types.InlineKeyboardButton(text='–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–±–º–µ–Ω–Ω–∏–∫',callback_data= 'info 2')
            back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data= 'Back')
            Inline.add(Info2,back)

            #bot.send_message(call.message.chat.id, ' –í—ã –∑–∞—à–ª–∏ –≤ –ò–Ω—Ñ–æ', reply_markup = Inline)
            #bot.send_message(call.message.chat.id, ' –°—Å—ã–ª–∫–∞ –Ω–∞ –ò–Ω—Ñ–æ\n https://vk.com/danilabaxbax ')
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=' ‚ÑπÔ∏è –ò–ù–§–û \n \n üç≠ CandyShop - —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. \n \n  ‚úÖ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º 24/7 \n \n  üîÑ –í—Å–µ –æ–±–º–µ–Ω—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –±—ã—Å—Ç—Ä–æ –∏ —á—ë—Ç–∫–æ, –±–µ–∑ –∫–∞–∫–æ–≥–æ –ª–∏–±–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞. \n \n  üîê –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –∏ –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã! \n  \n üë®üèº‚ÄçüöÄ –ù–∞—à–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ –∏ –≤—Å–µ–≥–¥–∞ –±—É–¥—É—Ç —Ä–∞–¥—ã –ø–æ–º–æ—á—å –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã!\n \n @candyshop_exchange_support ')
            bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup=Inline)

        elif call.data == 'info 2':
            Inline = types.InlineKeyboardMarkup()
            back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data= 'info')
            Inline.add(back)

            bot.edit_message_text(chat_id= call.message.chat.id,message_id = call.message.id,text='–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–±–º–µ–Ω–Ω–∏–∫? \n \n  1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ö—É–ø–∏—Ç—å¬ª –∏–ª–∏ ¬´–ü—Ä–æ–¥–∞—Ç—å¬ª.  \n \n  2Ô∏è‚É£ –ë–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –í–∞–º –≤—ã–±—Ä–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –≤–∞–ª—é—Ç—É  \n  \n 3Ô∏è‚É£ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É. \n \n  4Ô∏è‚É£ –ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –∑–∞—è–≤–∫—É, –∫–æ—Ç–æ—Ä—É—é –í–∞–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º.  \n \n  5Ô∏è‚É£ –í—Å—ë! –ë–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞—è–≤–∫—É –∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ –≤—ã—Å—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤, —Å–æ–≤–µ—Ä—à–∏—Ç –æ–±–º–µ–Ω –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –≤–∞–ª—é—Ç—É –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏! \n \n  ‚ùóÔ∏è–û–ß–ï–ù–¨ –í–ê–ñ–ù–û ‚ùóÔ∏è–ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é —Å—É–º–º—É, —Ç–æ –í–∞–º –Ω—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –µ–º—É –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞. \n \n  –ù–∞—à–∞ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @candyshop_exchange_support\n' )
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id= call.message.id, reply_markup= Inline)

        elif call.data == 'buy':
           Inline = types.InlineKeyboardMarkup(row_width=2)
           itembuy1 = types.InlineKeyboardButton(text = 'ü™ôBitcoin', callback_data='Bitcoin_buy')
           itembuy2 = types.InlineKeyboardButton(text = 'üíµUSDT (Tether ERC-20)', callback_data='USDT_buy')
           back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data= 'Back')
           Inline.add(itembuy1,itembuy2,back)
    
            
            #bot.send_message(call.message.chat.id, ' –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å', reply_markup = Inline)
           bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=' üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏')
           bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup=Inline)
           
            


        elif call.data == 'Bitcoin_buy':
          global msg_to_delete7
          Inline = types.InlineKeyboardMarkup()
          backbuy = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='Back_buy1')

          Inline.add(backbuy)

            #bot.send_message(call.message.chat.id,'–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å Bitcoin?', reply_markup= Inline)
          msg_to_delete7 = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='‚ùî –ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å Bitcoin? \n (–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –æ—Ç 1000 –¥–æ 200000 RUB) \n üë®üèº‚ÄçüöÄ–ï—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: @candyshop_exchange_support ')
          bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup=Inline)
          bot.register_next_step_handler(msg_to_delete7, buy_btc)
          
          #time.sleep(60)
          #bot.delete_message(call.message.chat.id, call.message.id)
          
          
            
            


        elif call.data == 'USDT_buy':
           global msg_to_delete8
           Inline = types.InlineKeyboardMarkup()
           backbuy = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data = 'Back_buy2')
           Inline.add(backbuy)

            #bot.send_message(call.message.chat.id,'–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å USDT (Tether ERC-20)?', reply_markup= Inline)
           msg_to_delete8 = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=' ‚ùî –ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å USDT (Tether ERC-20)?  \n (–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –æ—Ç 1000 –¥–æ 200000 RUB) \n üë®üèº‚ÄçüöÄ–ï—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: @candyshop_exchange_support')
           bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup=Inline)
           bot.register_next_step_handler(msg_to_delete8, buy_usdt)

           #time.sleep(60)
           #bot.delete_message(call.message.chat.id, call.message.id)
        

        elif call.data == 'Back_buy1':
            Inline = types.InlineKeyboardMarkup()
            itembuy1 = types.InlineKeyboardButton(text = 'ü™ôBitcoin', callback_data='Bitcoin_buy')
            itembuy2 = types.InlineKeyboardButton(text = 'üíµUSDT (Tether ERC-20)', callback_data='USDT_buy')
            back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data= 'Back')
            Inline.add(back,itembuy1,itembuy2)

            #bot.send_message(call.message.chat.id, ' –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å', reply_markup = Inline)
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=' üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏')
            bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup=Inline)


        elif call.data == 'Back_buy2':
            Inline = types.InlineKeyboardMarkup()
            itembuy1 = types.InlineKeyboardButton(text = 'ü™ôBitcoin', callback_data='Bitcoin_buy')
            itembuy2 = types.InlineKeyboardButton(text = 'üíµUSDT (Tether ERC-20)', callback_data='USDT_buy')
            back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data= 'Back')
            Inline.add(back,itembuy1,itembuy2)

            #bot.send_message(call.message.chat.id, ' –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å', reply_markup = Inline)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=' üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏')
            bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup=Inline)         


        elif call.data == 'sell':
            Inline = types.InlineKeyboardMarkup(row_width=2)
            itemsell1 = types.InlineKeyboardButton(text='ü™ôBitcoin', callback_data= 'Bitcoin_sell')
            itemsell2 = types.InlineKeyboardButton(text='üíµUSDT (Tether ERC-20)', callback_data= 'USDT_sell')
            back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data = 'Back')
            Inline.add(itemsell1,itemsell2,back)

            #bot.send_message(call.message.chat.id, ' –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å', reply_markup = Inline)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å')
            bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup=Inline)
            


        elif call.data == 'Bitcoin_sell':
            global msg_to_delete5
            Inline = types.InlineKeyboardMarkup()
            backsell = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data='Back_sell1')
            Inline.add(backsell)
            
            #bot.send_message(call.message.chat.id,'–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å Bitcoin?', reply_markup= Inline)
            msg_to_delete5 = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='‚ùî –ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å Bitcoin \n (–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –æ—Ç 0.0003 –¥–æ 0.1 BTC) \n \n ‚õî –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–∞—Ä—Ç—ã —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –±–∞–Ω–∫–æ–≤ \n \n üë®üèº‚ÄçüöÄ–ï—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: @candyshop_exchange_support \n')
            bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup=Inline)
            bot.register_next_step_handler(msg_to_delete5, sell_btc)

            #time.sleep(15)
            #bot.delete_message(call.message.chat.id, call.message.id, timeout= 15)


        elif call.data == 'USDT_sell':
            global msg_to_delete6
            Inline = types.InlineKeyboardMarkup()
            backsell = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',callback_data = 'Back_sell2')
            Inline.add(backsell)

            #bot.send_message(call.message.chat.id,'–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å USDT (Tether ERC-20)?', reply_markup= Inline)
            msg_to_delete6 = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='‚ùî –ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å USDT (Tether ERC-20) \n (–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –æ—Ç 10 –¥–æ 3000 USDT) \n \n‚õî–í–Ω–∏–º–∞–Ω–∏–µ! –í—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–∞—Ä—Ç—ã —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –±–∞–Ω–∫–æ–≤\n \n  üë®üèº‚ÄçüöÄ–ï—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: @candyshop_exchange_support\n')
            bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup=Inline)
            bot.register_next_step_handler(msg_to_delete6, sell_usdt)

            #time.sleep(15)
            #bot.delete_message(call.message.chat.id, call.message.id,timeout= 15)


        elif call.data == 'Back_sell1':
            Inline = types.InlineKeyboardMarkup()
            itemsell1 = types.InlineKeyboardButton(text='ü™ôBitcoin', callback_data= 'Bitcoin_sell')
            itemsell2 = types.InlineKeyboardButton(text='üíµUSDT (Tether ERC-20)', callback_data= 'USDT_sell')
            back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data = 'Back')
            Inline.add(back,itemsell1,itemsell2)

            #bot.send_message(call.message.chat.id, ' –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å', reply_markup = Inline)
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å')
            bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup=Inline)


        elif call.data == 'Back_sell2':
            Inline = types.InlineKeyboardMarkup()
            itemsell1 = types.InlineKeyboardButton(text='ü™ôBitcoin', callback_data= 'Bitcoin_sell')
            itemsell2 = types.InlineKeyboardButton(text='USDT (Tether ERC-20)', callback_data= 'USDT_sell')
            back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data = 'Back')
            Inline.add(back,itemsell1,itemsell2)

            #bot.send_message(call.message.chat.id, ' –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å', reply_markup = Inline)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å')
            bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup=Inline)   

        elif call.data == 'Back_sell3':
            itemsell1 = types.InlineKeyboardButton(text='ü™ôBitcoin', callback_data= 'Bitcoin_sell')
            itemsell2 = types.InlineKeyboardButton(text='USDT (Tether ERC-20)', callback_data= 'USDT_sell')
            back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data = 'Back')
            Inline.add(back,itemsell1,itemsell2)

            #bot.send_message(call.message.chat.id, ' –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å', reply_markup = Inline)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å')
            bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup=Inline)
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
            


        elif call.data == 'Back_buy3':
            Inline = types.InlineKeyboardMarkup()
            itembuy1 = types.InlineKeyboardButton(text = 'ü™ôBitcoin', callback_data='Bitcoin_buy')
            itembuy2 = types.InlineKeyboardButton(text = 'üíµUSDT (Tether ERC-20)', callback_data='USDT_buy')
            back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data= 'Back')
            Inline.add(back,itembuy1,itembuy2)

            #bot.send_message(call.message.chat.id, ' –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å', reply_markup = Inline)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏')
            bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup=Inline)
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)


        elif call.data == 'btc_buy_yes':
            
            group_id = 'your_group_ID'
            chat_id = call.message.chat.id
            user = user_dict[chat_id] 
            Inline = types.InlineKeyboardMarkup()
            Back = types.InlineKeyboardButton(text = '‚ùå–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data= 'Back')
            Approve = types.InlineKeyboardButton(text='‚úÖ–ü–µ—Ä–µ–≤—ë–ª',callback_data='btc_buy_yes_approve')
            Inline.add(Back,Approve)
            bot.delete_message(call.message.chat.id, call.message.id)
            bot.send_message(call.message.chat.id,'‚úÖ–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\n \n üí∞–°—É–º–º–∞: {} BTC \n üëõ–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {} \n üí∞–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {} ‚ÇΩ \n \n üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: \n —Ä–µ–∫–≤–∏–∑–∏—Ç—ã \n \n –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: –æ—Ç 30 –¥–æ 120 –º–∏–Ω—É—Ç\n \n üïò–ó–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç\n –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—á–µ–Ω–æ¬ª –∏–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É¬ª\n \n ‚ÄºÔ∏è–í–∞–∂–Ω–æ! –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞—è–≤–∫—É –ø–æ–∑–∂–µ 15 –º–∏–Ω—É—Ç, —Ç–æ –º—ã –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É.'.format(y,q,k),reply_markup= Inline)
            #bot.send_message(group_id, GetReGData(user, '–ó–∞—è–≤–∫–∞ –æ—Ç ', bot.get_me().username), parse_mode= 'Markdown')
            #bot.send_message(group_id,  '–ó–∞—è–≤–∫–∞ –≤—ã—à–µ –æ—Ç —á–µ–ª–æ–≤–∫–∞ —Å id:@' f'{username}',  parse_mode='Markdown')
            
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)


        elif call.data == 'btc_buy_yes_approve':
            group_id = 'your_group_ID'
            chat_id = call.message.chat.id
            user = user_dict[chat_id] 
            Inline = types.InlineKeyboardMarkup()
            Back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data= 'Back')
            Inline.add(Back)

            Start = types.InlineKeyboardMarkup(row_width= 2)
            item1 = types.InlineKeyboardButton(text = '‚¨áÔ∏è–ö—É–ø–∏—Ç—å' , callback_data= 'buy')
            item2 = types.InlineKeyboardButton(text = '‚¨ÜÔ∏è–ü—Ä–æ–¥–∞—Ç—å', callback_data='sell') 
            item3 = types.InlineKeyboardButton(text = 'üí¨–ß–∞—Ç', url = 'https://t.me/+c2iY0XEkYzlhZGNk')
            item4 = types.InlineKeyboardButton(text = 'üì¢–ö–∞–Ω–∞–ª', url= 'https://t.me/candyshop_exchange')
            item5 = types.InlineKeyboardButton(text = '‚ùì–û—Ç–∑—ã–≤—ã', url= 'https://t.me/candyshop_exchange_reviews')
            item6 = types.InlineKeyboardButton(text = 'üë®üèº‚ÄçüöÄ–û–ø–µ—Ä–∞—Ç–æ—Ä', url= 'https://t.me/candyshop_exchange_support')
            item7 = types.InlineKeyboardButton(text = 'üìà–ö—É—Ä—Å', callback_data= 'course')
            #Course = types.InlineKeyboardButton(text= 'üìà–ö—É—Ä—Å', switch_inline_query_current_chat= '')
            item8 = types.InlineKeyboardButton(text = '‚ÑπÔ∏è–ò–Ω—Ñ–æ', callback_data= 'info')

 

            Start.add(item1, item2, item3, item4, item5, item6, item7, item8)

 
 
 
            #bot.edit_message_text(chat_id= call.message.chat.id, message_id= call.mesage.id, text= '–õ—É—á—à–∏–π')
            #bot.edit_message_reply_markup(chat_id= call.message.chat.id,message_id= call.message.id, reply_markup= Inline)
            bot.delete_message(call.message.chat.id,call.message.id)
            bot.send_message(call.message.chat.id, '‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ {} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! \n \n üí∞–°—É–º–º–∞: {} BTC \n üí∞–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {} ‚ÇΩ \n üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: \n  —Ä–µ–∫–≤–∏–∑–∏—Ç—ã \n \n ‚ÄºÔ∏è–í–∞–∂–Ω–æ! –ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é —Å—É–º–º—É, —Ç–æ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞!'.format(number,y,k))
            bot.send_message(group_id, GetReGData(user, '–ó–∞—è–≤–∫–∞ –æ—Ç ', bot.get_me().username), parse_mode= 'Markdown')
            bot.send_message(group_id,  '–ó–∞—è–≤–∫–∞ –≤—ã—à–µ –æ—Ç —á–µ–ª–æ–≤–∫–∞ —Å id:@' f'{username}',  parse_mode='Markdown')
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
            bot.send_message(call.message.chat.id, ' üç≠ CANDYSHOP EXCHANGE \n \n üîÑ–ö—É–ø–∏—Ç—å –∏ –ø—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n üîê –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ \n üí´ –ë—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ \n üî• –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ 24/7 \n' , reply_markup = Start)     

        elif call.data == 'btc_buy_no':
             Inline = types.InlineKeyboardMarkup()
             backbuy = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='Back_buy1')

             Inline.add(backbuy)

            #bot.send_message(call.message.chat.id,'–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å Bitcoin?', reply_markup= Inline)
             msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=' –ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å Bitcoin? \n (–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –æ—Ç 1000 –¥–æ 200000 RUB) \n üë®üèº‚ÄçüöÄ–ï—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: @candyshop_exchange_support ')
             bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup=Inline)
             bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
             bot.register_next_step_handler(msg, buy_btc)

        elif call.data == 'btc_sell_yes':
            group_id = 'your_group_ID'
            chat_id = call.message.chat.id
            user = user_dict2[chat_id] 
            Inline = types.InlineKeyboardMarkup(row_width= 2)
            Back = types.InlineKeyboardButton(text = '‚ùå–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data= 'Back')
            Approve = types.InlineKeyboardButton(text= '‚úÖ–û–ø–ª–∞—Ç–∏–ª', callback_data= 'btc_sell_yes_approve')
            Address = types.InlineKeyboardButton(text= '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞', switch_inline_query_current_chat="–∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞")

            Inline.add(Back,Approve,Address)
            bot.delete_message(call.message.chat.id, call.message.id)
            bot.send_message(call.message.chat.id,'‚úÖ–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\n  üí∞–û—Ç–ø—Ä–∞–≤—å—Ç–µ: {} BTC \n üëõ–ù–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å:  –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ \n ‚ÄºÔ∏è–í–∞–∂–Ω–æ! –í–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–æ–≤–Ω–æ ¬´—Å—É–º–º–∞¬ª ¬´–≤–∞–ª—é—Ç–∞¬ª –∏–Ω–∞—á–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞!\n üïò–ó–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç. \n üí∞–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: {} ‚ÇΩ \n üí≥–í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: {} \n –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏–ª¬ª –∏–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É¬ª \n ‚ÄºÔ∏è–í–∞–∂–Ω–æ! –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞—è–≤–∫—É –ø–æ–∑–∂–µ 15 –º–∏–Ω—É—Ç, —Ç–æ –º—ã –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É.'.format(g,v,t),reply_markup= Inline)
           # bot.send_message(group_id, GetReGData2(user, '–ó–∞—è–≤–∫–∞ –æ—Ç ', bot.get_me().username), parse_mode= 'Markdown')
            #bot.send_message(group_id,  '–ó–∞—è–≤–∫–∞ –≤—ã—à–µ –æ—Ç —á–µ–ª–æ–≤–∫–∞ —Å id:@' f'{username}',  parse_mode='Markdown')
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)


        elif call.data == 'btc_sell_yes_approve':
            group_id = 'your_group_ID'
            chat_id = call.message.chat.id
            user = user_dict2[chat_id] 
            Inline = types.InlineKeyboardMarkup()
            Back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data= 'Back')
            Inline.add(Back)

            Start = types.InlineKeyboardMarkup(row_width= 2)
            item1 = types.InlineKeyboardButton(text = '‚¨áÔ∏è–ö—É–ø–∏—Ç—å' , callback_data= 'buy')
            item2 = types.InlineKeyboardButton(text = '‚¨ÜÔ∏è–ü—Ä–æ–¥–∞—Ç—å', callback_data='sell') 
            item3 = types.InlineKeyboardButton(text = 'üí¨–ß–∞—Ç', url = 'https://t.me/+c2iY0XEkYzlhZGNk')
            item4 = types.InlineKeyboardButton(text = 'üì¢–ö–∞–Ω–∞–ª', url= 'https://t.me/candyshop_exchange')
            item5 = types.InlineKeyboardButton(text = '‚ùì–û—Ç–∑—ã–≤—ã', url= 'https://t.me/candyshop_exchange_reviews')
            item6 = types.InlineKeyboardButton(text = 'üë®üèº‚ÄçüöÄ–û–ø–µ—Ä–∞—Ç–æ—Ä', url= 'https://t.me/candyshop_exchange_support')
            item7 = types.InlineKeyboardButton(text = 'üìà–ö—É—Ä—Å', callback_data= 'course')
            #Course = types.InlineKeyboardButton(text= 'üìà–ö—É—Ä—Å', switch_inline_query_current_chat='')
            item8 = types.InlineKeyboardButton(text = '‚ÑπÔ∏è–ò–Ω—Ñ–æ', callback_data= 'info')

 

            Start.add(item1, item2, item3, item4, item5, item6, item7, item8)

            #bot.edit_message_text(chat_id= call.message.chat.id, message_id= call.mesage.id, text= '–õ—É—á—à–∏–π')
            #bot.edit_message_reply_markup(chat_id= call.message.chat.id,message_id= call.message.id, reply_markup= Inline)
            bot.delete_message(call.message.chat.id,call.message.id)
            bot.send_message(call.message.chat.id, '‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ {} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n üí∞–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏: {} BTC \n üí∞–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: {} ‚ÇΩ\n üí≥–í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: {} \n üëõ–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ \n \n üöÄ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç 30 –¥–æ 120 –º–∏–Ω—É—Ç \n \n ‚ÄºÔ∏è–í–∞–∂–Ω–æ! –ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é —Å—É–º–º—É, —Ç–æ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞!'.format(number,g,v,t))
            bot.send_message(group_id, GetReGData2(user, '–ó–∞—è–≤–∫–∞ –æ—Ç ', bot.get_me().username), parse_mode= 'Markdown')
            bot.send_message(group_id,  '–ó–∞—è–≤–∫–∞ –≤—ã—à–µ –æ—Ç —á–µ–ª–æ–≤–∫–∞ —Å id:@' f'{username}',  parse_mode='Markdown')
            bot.send_message(call.message.chat.id, ' üç≠ CANDYSHOP EXCHANGE \n \n üîÑ–ö—É–ø–∏—Ç—å –∏ –ø—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n üîê –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ \n üí´ –ë—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ \n üî• –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ 24/7 \n' , reply_markup = Start)
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)    
            

        elif call.data == 'btc_sell_no':
             Inline = types.InlineKeyboardMarkup()
             backbuy = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='Back_sell1')

             Inline.add(backbuy)

            #bot.send_message(call.message.chat.id,'–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å Bitcoin?', reply_markup= Inline)
             msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=' \n (–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –æ—Ç 0.0003 –¥–æ 0.1 BTC) \n üë®üèº‚ÄçüöÄ–ï—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: @candyshop_exchange_support  ')
             bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup=Inline)
             bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
             bot.register_next_step_handler(msg, sell_btc)

        elif call.data == 'usdt_buy_yes':
            group_id = 'your_group_ID'
            chat_id = call.message.chat.id
            user = user_dict3[chat_id] 
            Inline = types.InlineKeyboardMarkup()
            Back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data= 'Back')
            Approve = types.InlineKeyboardButton(text='‚úÖ–û–ø–ª–∞—Ç–∏–ª', callback_data='usdt_buy_yes_approve')
            Inline.add(Back,Approve)
            bot.delete_message(call.message.chat.id, call.message.id)
            bot.send_message(call.message.chat.id,'‚úÖ–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\n \n üí∞–°—É–º–º–∞: {} USDT \n üëõ–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {} \n \n üí∞–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {} ‚ÇΩ \n \n  üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: \n —Ä–µ–∫–≤–∏–∑–∏—Ç—ã \n \n –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç 30 –¥–æ 120 –º–∏–Ω—É—Ç \n \n üïò–ó–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç\n –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—á–µ–Ω–æ¬ª –∏–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É¬ª\n \n ‚ÄºÔ∏è–í–∞–∂–Ω–æ! –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞—è–≤–∫—É –ø–æ–∑–∂–µ 15 –º–∏–Ω—É—Ç, —Ç–æ –º—ã –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É.'.format(z,f,o),reply_markup= Inline)
            #bot.send_message(group_id, GetReGData3(user, '–ó–∞—è–≤–∫–∞ –æ—Ç ', bot.get_me().username), parse_mode= 'Markdown')
            #bot.send_message(group_id,  '–ó–∞—è–≤–∫–∞ –≤—ã—à–µ –æ—Ç —á–µ–ª–æ–≤–∫–∞ —Å id:@' f'{username}',  parse_mode='Markdown')
            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)


        elif call.data == 'usdt_buy_yes_approve':
            group_id = 'your_group_ID'
            chat_id = call.message.chat.id
            user = user_dict3[chat_id] 
            Inline = types.InlineKeyboardMarkup()
            Back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data= 'Back')
            Inline.add(Back)

            Start = types.InlineKeyboardMarkup(row_width= 2)
            item1 = types.InlineKeyboardButton(text = '‚¨áÔ∏è–ö—É–ø–∏—Ç—å' , callback_data= 'buy')
            item2 = types.InlineKeyboardButton(text = '‚¨ÜÔ∏è–ü—Ä–æ–¥–∞—Ç—å', callback_data='sell') 
            item3 = types.InlineKeyboardButton(text = 'üí¨–ß–∞—Ç', url = 'https://t.me/+c2iY0XEkYzlhZGNk')
            item4 = types.InlineKeyboardButton(text = 'üì¢–ö–∞–Ω–∞–ª', url= 'https://t.me/candyshop_exchange')
            item5 = types.InlineKeyboardButton(text = '‚ùì–û—Ç–∑—ã–≤—ã', url= 'https://t.me/candyshop_exchange_reviews')
            item6 = types.InlineKeyboardButton(text = 'üë®üèº‚ÄçüöÄ–û–ø–µ—Ä–∞—Ç–æ—Ä', url= 'https://t.me/candyshop_exchange_support')
            item7 = types.InlineKeyboardButton(text = 'üìà–ö—É—Ä—Å', callback_data= 'course')
            #Course = types.InlineKeyboardButton(text= 'üìà–ö—É—Ä—Å', switch_inline_query_current_chat='')
            item8 = types.InlineKeyboardButton(text = '‚ÑπÔ∏è–ò–Ω—Ñ–æ', callback_data= 'info')

 

            Start.add(item1, item2, item3, item4, item5, item6, item7, item8)
            #bot.edit_message_text(chat_id= call.message.chat.id, message_id= call.mesage.id, text= '–õ—É—á—à–∏–π')
            #bot.edit_message_reply_markup(chat_id= call.message.chat.id,message_id= call.message.id, reply_markup= Inline)
            bot.delete_message(call.message.chat.id,call.message.id)
            bot.send_message(call.message.chat.id, '‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ {} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! \n ‚öôÔ∏è–°—Ç–∞—Ç—É—Å: –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ \n üí∞–°—É–º–º–∞: {} USDT \n üí∞–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {} ‚ÇΩ \n üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: \n  —Ä–µ–∫–≤–∏–∑–∏—Ç—ã \n ‚ÄºÔ∏è–í–∞–∂–Ω–æ! –ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é —Å—É–º–º—É, —Ç–æ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞!'.format(number,z,o))
            bot.send_message(group_id, GetReGData3(user, '–ó–∞—è–≤–∫–∞ –æ—Ç ', bot.get_me().username), parse_mode= 'Markdown')
            bot.send_message(group_id,  '–ó–∞—è–≤–∫–∞ –≤—ã—à–µ –æ—Ç —á–µ–ª–æ–≤–∫–∞ —Å id:@' f'{username}',  parse_mode='Markdown')
            bot.send_message(call.message.chat.id, ' üç≠ CANDYSHOP EXCHANGE \n \n üîÑ–ö—É–ø–∏—Ç—å –∏ –ø—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n üîê –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ \n üí´ –ë—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ \n üî• –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ 24/7 \n' , reply_markup = Start)

            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)     
            

        elif call.data == 'usdt_buy_no':
             Inline = types.InlineKeyboardMarkup()
             backbuy = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='Back_buy1')

             Inline.add(backbuy)

            #bot.send_message(call.message.chat.id,'–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å Bitcoin?', reply_markup= Inline)
             msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å USDT (Tether ERC-20) \n (–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –æ—Ç 1000 –¥–æ 200000 USDT) \n üë®üèº‚ÄçüöÄ–ï—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: @candyshop_exchange_support  ')
             bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup=Inline)
             bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
             bot.register_next_step_handler(msg, buy_usdt)


        elif call.data == 'usdt_sell_yes':
            group_id = 'your_group_ID'
            chat_id = call.message.chat.id
            user = user_dict4[chat_id] 
            Inline = types.InlineKeyboardMarkup(row_width= 2)
            Back = types.InlineKeyboardButton(text = '‚ùå–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data= 'Back')
            Approve = types.InlineKeyboardButton(text='‚úÖ–û–ø–ª–∞—Ç–∏–ª', callback_data= 'usdt_sell_yes_approve')
            Address = types.InlineKeyboardButton(text= '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞', switch_inline_query_current_chat="–∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞")

            Inline.add(Back, Approve,Address)
            bot.delete_message(call.message.chat.id, call.message.id)
            bot.send_message(call.message.chat.id,'‚úÖ–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\n  üí∞–û—Ç–ø—Ä–∞–≤—å—Ç–µ: {} USDT \n üëõ–ù–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å:  –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞\n ‚ÄºÔ∏è–í–∞–∂–Ω–æ! –í–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–æ–≤–Ω–æ ¬´—Å—É–º–º–∞¬ª ¬´–≤–∞–ª—é—Ç–∞¬ª –∏–Ω–∞—á–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞!\n üïò–ó–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç. \n üí∞–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: {} ‚ÇΩ \n üí≥–í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: {} \n –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏–ª¬ª –∏–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É¬ª \n ‚ÄºÔ∏è–í–∞–∂–Ω–æ! –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞—è–≤–∫—É –ø–æ–∑–∂–µ 15 –º–∏–Ω—É—Ç, —Ç–æ –º—ã –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É.'.format(a,c,p),reply_markup=Inline)
            #bot.send_message(group_id, GetReGData4(user, '–ó–∞—è–≤–∫–∞ –æ—Ç ', bot.get_me().username), parse_mode= 'Markdown')
            #bot.send_message(group_id,  '–ó–∞—è–≤–∫–∞ –≤—ã—à–µ –æ—Ç —á–µ–ª–æ–≤–∫–∞ —Å id:@' f'{username}',  parse_mode='Markdown')
            #bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)

        elif call.data == 'usdt_sell_yes_approve':
            group_id = 'your_group_ID'
            chat_id = call.message.chat.id
            user = user_dict4[chat_id] 
            Inline = types.InlineKeyboardMarkup()
            Back = types.InlineKeyboardButton(text= '–ù–∞–∑–∞–¥', callback_data= 'Back')
            Address = types.InlineKeyboardButton(text= '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞', switch_inline_query_current_chat="–∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞")
            Inline.add(Address)

            Start = types.InlineKeyboardMarkup(row_width= 2)
            item1 = types.InlineKeyboardButton(text = '‚¨áÔ∏è–ö—É–ø–∏—Ç—å' , callback_data= 'buy')
            item2 = types.InlineKeyboardButton(text = '‚¨ÜÔ∏è–ü—Ä–æ–¥–∞—Ç—å', callback_data='sell') 
            item3 = types.InlineKeyboardButton(text = 'üí¨–ß–∞—Ç', url = 'https://t.me/+c2iY0XEkYzlhZGNk')
            item4 = types.InlineKeyboardButton(text = 'üì¢–ö–∞–Ω–∞–ª', url= 'https://t.me/candyshop_exchange')
            item5 = types.InlineKeyboardButton(text = '‚ùì–û—Ç–∑—ã–≤—ã', url= 'https://t.me/candyshop_exchange_reviews')
            item6 = types.InlineKeyboardButton(text = 'üë®üèº‚ÄçüöÄ–û–ø–µ—Ä–∞—Ç–æ—Ä', url= 'https://t.me/candyshop_exchange_support')
            item7 = types.InlineKeyboardButton(text = 'üìà–ö—É—Ä—Å', callback_data= 'course')
            #Course = types.InlineKeyboardButton(text= 'üìà–ö—É—Ä—Å', switch_inline_query_current_chat='')
            item8 = types.InlineKeyboardButton(text = '‚ÑπÔ∏è–ò–Ω—Ñ–æ', callback_data= 'info')

 

            Start.add(item1, item2, item3, item4, item5, item6, item7, item8)

            #bot.edit_message_text(chat_id= call.message.chat.id, message_id= call.mesage.id, text= '–õ—É—á—à–∏–π')
            #bot.edit_message_reply_markup(chat_id= call.message.chat.id,message_id= call.message.id, reply_markup= Inline)
            bot.delete_message(call.message.chat.id,call.message.id)
            bot.send_message(call.message.chat.id, '‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ {} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n üí∞–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏: {} USDT \n üí∞–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: {} ‚ÇΩ\n üí≥–í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: {} \n üëõ–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ \n \n üöÄ–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: –æ—Ç 30 –¥–æ 120 –º–∏–Ω—É—Ç \n \n ‚ÄºÔ∏è–í–∞–∂–Ω–æ! –ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é —Å—É–º–º—É, —Ç–æ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞!'.format(number,a,c,p))
            bot.send_message(group_id, GetReGData4(user, '–ó–∞—è–≤–∫–∞ –æ—Ç ', bot.get_me().username), parse_mode= 'Markdown')
            bot.send_message(group_id,  '–ó–∞—è–≤–∫–∞ –≤—ã—à–µ –æ—Ç —á–µ–ª–æ–≤–∫–∞ —Å id:@' f'{username}',  parse_mode='Markdown')
            bot.send_message(call.message.chat.id, ' üç≠ CANDYSHOP EXCHANGE \n \n üîÑ–ö—É–ø–∏—Ç—å –∏ –ø—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n üîê –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ \n üí´ –ë—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ \n üî• –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ 24/7 \n' , reply_markup = Start)

            bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)


            

        elif call.data == 'usdt_sell_no':
             Inline = types.InlineKeyboardMarkup()
             backbuy = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='Back_sell1')

             Inline.add(backbuy)

            #bot.send_message(call.message.chat.id,'–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å Bitcoin?', reply_markup= Inline)
             msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å USDT (Tether ERC-20) \n (–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –æ—Ç 10 –¥–æ 3000 USDT) \n üë®üèº‚ÄçüöÄ–ï—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: @candyshop_exchange_support  ')
             bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup=Inline)
             bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
             bot.register_next_step_handler(msg, sell_usdt)                

                             
        elif call.data == 'Back':
         Inline = types.InlineKeyboardMarkup(row_width= 2)
         item1 = types.InlineKeyboardButton(text = '‚¨áÔ∏è–ö—É–ø–∏—Ç—å' , callback_data= 'buy')
         item2 = types.InlineKeyboardButton(text = '‚¨ÜÔ∏è–ü—Ä–æ–¥–∞—Ç—å', callback_data='sell') 
         item3 = types.InlineKeyboardButton(text = 'üí¨–ß–∞—Ç', url='https://t.me/+c2iY0XEkYzlhZGNk')
         item4 = types.InlineKeyboardButton(text = 'üì¢–ö–∞–Ω–∞–ª', url= 'https://t.me/candyshop_exchange')
         item5 = types.InlineKeyboardButton(text = '‚ùì–û—Ç–∑—ã–≤—ã', url= 'https://t.me/candyshop_exchange_reviews')
         item6 = types.InlineKeyboardButton(text = 'üë®üèº‚ÄçüöÄ–û–ø–µ—Ä–∞—Ç–æ—Ä', url= 'https://t.me/candyshop_exchange_support')
         item7 = types.InlineKeyboardButton(text = 'üìà–ö—É—Ä—Å', callback_data= 'course')
         #Course = types.InlineKeyboardButton(text= 'üìà–ö—É—Ä—Å', switch_inline_query_current_chat= '')
         item8 = types.InlineKeyboardButton(text = '‚ÑπÔ∏è–ò–Ω—Ñ–æ', callback_data= 'info')

         Inline.add(item1, item2, item3, item4, item5, item6, item7, item8)

         #bot.send_message(call.message.chat.id, ' –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup = Inline)
         bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
         bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=' üç≠ CANDYSHOP EXCHANGE \n \n üîÑ–ö—É–ø–∏—Ç—å –∏ –ø—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n üîê –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ \n üí´ –ë—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ \n üî• –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ 24/7 \n')
         bot.edit_message_reply_markup(chat_id= call.message.chat.id, message_id= call.message.id, reply_markup=Inline)


        

        #elif call.data == '123':
        #def calculator_answer():
                    #global value 
                    #global old_value
        #if value == '':
                    #Calculator_usdt = types.InlineKeyboardMarkup(row_width= 3)
                   # button_1 = types.InlineKeyboardButton(text = '1', callback_data= '1')
                   # button_2 = types.InlineKeyboardButton(text = '2', callback_data= '2')
                    #button_3 = types.InlineKeyboardButton(text = '3', callback_data= '3')
                    #button_4 = types.InlineKeyboardButton(text= '4', callback_data= '4')
                    #button_5 = types.InlineKeyboardButton(text = '5', callback_data= '5')
                    #button_6 = types.InlineKeyboardButton(text= '6', callback_data= '6')
                   # button_7 = types.InlineKeyboardButton(text= '7', callback_data= '7')
                    #button_8 = types.InlineKeyboardButton(text = '8', callback_data= '8')
                    #button_9 = types.InlineKeyboardButton(text = '9', callback_data= '9')
                    #button_10 = types.InlineKeyboardButton(text = '=', callback_data= '=')
                    #button_11 = types.InlineKeyboardButton(text= 'C', callback_data= 'C')
                    #button_12 = types.InlineKeyboardButton(text = '0', callback_data= '0')
                    #button_13 = types.InlineKeyboardButton(text = '.', callback_data= '.')
           
                    #Calculator_usdt.add(button_1, button_2, button_3, button_4, button_5, button_6, button_7, button_8, button_9, button_13, button_12, button_11, button_10)
                    #bot.send_message(call.message.chat.id, '0', reply_markup= Calculator_usdt)
        #else:
                    #Calculator_usdt = types.InlineKeyboardMarkup(row_width= 3)
                    #button_1 = types.InlineKeyboardButton(text = '1', callback_data= '1')
                    #button_2 = types.InlineKeyboardButton(text = '2', callback_data= '2')
                   # button_3 = types.InlineKeyboardButton(text = '3', callback_data= '3')
                    #button_4 = types.InlineKeyboardButton(text= '4', callback_data= '4')
                   # button_5 = types.InlineKeyboardButton(text = '5', callback_data= '5')
                   # button_6 = types.InlineKeyboardButton(text= '6', callback_data= '6')
                    #button_7 = types.InlineKeyboardButton(text= '7', callback_data= '7')
                    #button_8 = types.InlineKeyboardButton(text = '8', callback_data= '8')
                    #button_9 = types.InlineKeyboardButton(text = '9', callback_data= '9')
                   # button_10 = types.InlineKeyboardButton(text = '=', callback_data= '=')
                   # button_11 = types.InlineKeyboardButton(text= 'C', callback_data= 'C')
                    #button_12 = types.InlineKeyboardButton(text = '0', callback_data= '0')
                    #button_13 = types.InlineKeyboardButton(text = '.', callback_data= '.')
           
                   # Calculator_usdt.add(button_1, button_2, button_3, button_4, button_5, button_6, button_7, button_8, button_9, button_13, button_12, button_11, button_10)
                   # bot.send_message(call.message.chat.id, value, reply_markup= Calculator_usdt)


        #Calculator_usdt = types.InlineKeyboardMarkup(row_width= 3)
            #global value 
            #global old_value
        #button_1 = types.InlineKeyboardButton(text = '1', callback_data= '1')
        #button_2 = types.InlineKeyboardButton(text = '2', callback_data= '2')
        #button_3 = types.InlineKeyboardButton(text = '3', callback_data= '3')
        #button_4 = types.InlineKeyboardButton(text= '4', callback_data= '4')
        #button_5 = types.InlineKeyboardButton(text = '5', callback_data= '5')
        #button_6 = types.InlineKeyboardButton(text= '6', callback_data= '6')
        #button_7 = types.InlineKeyboardButton(text= '7', callback_data= '7')
        #button_8 = types.InlineKeyboardButton(text = '8', callback_data= '8')
        #button_9 = types.InlineKeyboardButton(text = '9', callback_data= '9')
        #button_10 = types.InlineKeyboardButton(text = '=', callback_data= '=')
        #button_11 = types.InlineKeyboardButton(text= 'C', callback_data= 'C')
        #button_12 = types.InlineKeyboardButton(text = '0', callback_data= '0')
        #button_13 = types.InlineKeyboardButton(text = '.', callback_data= '.')
        #Calculator_usdt.add(button_1, button_2, button_3, button_4, button_5, button_6, button_7, button_8, button_9, button_13, button_12, button_11, button_10)
    
        
        # if call.data== 'C':
        #        value = ''
        # elif call.data == '=':
        #        value = float(value) * 1.1
        #        value = str(value)
            
            
        #else:
               #value += call.data
            

        #if value != old_value:
          # if value == '':
             #  bot.edit_message_text(chat_id= call.message.chat.id, message_id= call.message.id, text= '0', reply_markup= Calculator_usdt)
           #else:
               #bot.edit_message_text(chat_id= call.message.chat.id, message_id= call.message.id, text= value, reply_markup= Calculator_usdt)     
 
        #old_value = value 



     
          

try:
    bot.polling(none_stop=True)
except:
    pass

